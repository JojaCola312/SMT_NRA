(set-info :smt-lib-version 2.6)
(set-logic QF_NRA)
(set-info :source |
Generated by: Da Shen, Yuliya Lierler
Generated on: 2019-04-29
Generator: EZSMT+
Application: SMT-based Constraint Answer Set Solver EZSMT+ for Non-tight Programs [1]

[1] Da Shen and Yuliya Lierler. "SMT-based Constraint Answer Set Solver EZSMT+ for Non-tight Programs"
    16th International Conference on Principles of Knowledge Representation and Reasoning (2018)
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status unknown)
; --- END HEADER ---

; --- Including necessary SMT functions ---

(define-fun max ((x Real) (y Real)) Real
  (ite (< x y) y x))

(define-fun min ((x Real) (y Real)) Real
  (ite (< x y) x y))

; --- END INCLUDES ---

(declare-fun |action(start(refuel(tank1)))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),0),0))| () Bool)
(declare-fun |some_action(1)| () Bool)
(declare-fun |required(ezcsp__eq(stime(generate),end(0)))| () Bool)
(declare-fun |decr(2,v(contrib(fuel_level,decr,generate),2))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr),2),0))| () Bool)
(declare-fun |required(ezcsp__lt(v_final(fuel_level,1),0))| () Bool)
(declare-fun |228| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),0))| () Bool)
(declare-fun |completed(refuel(tank1),3)| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),ezcsp__tm(2,ezcsp__mn(end(1),start(1)))))| () Bool)
(declare-fun |action(end(refuel(tank1)))| () Bool)
(declare-fun |restricted_ineq(lp)| () Bool)
(declare-fun |hold_s(inprogr(refuel(tank1)),3)| () Bool)
(declare-fun |required(ezcsp__geq(end(2),start(2)))| () Bool)
(declare-fun |restricted_ineq(nlp)| () Bool)
(declare-fun |maxintval(1000)| () Bool)
(declare-fun |incr(2,v(contrib(fuel_level,incr,refuel(tank1)),2))| () Bool)
(declare-fun |cspvar(dur(1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(1))))| () Bool)
(declare-fun |occurs(start(generate),1)| () Bool)
(declare-fun |hold_s(inprogr(generate),1)| () Bool)
(declare-fun |required(ezcsp__eq(ezcsp__mn(end(1),stime(refuel(tank1))),10))| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr),2),0,1000)| () Bool)
(declare-fun |required_false(geq_flevel_0,2)| () Bool)
(declare-fun |completed(generate)| () Bool)
(declare-fun |required(ezcsp__lt(v_final(fuel_level,2),0))| () Bool)
(declare-fun |required(ezcsp__sum(list(decr(0),2),ezcsp__eq,v(contrib(fuel_level,decr),0)))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr),0),0))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))| () Bool)
(declare-fun |cspvar(adur(generate),0,1000)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr,generate),1),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(v_initial(fuel_level,0),0))| () Bool)
(declare-fun |cspvar(dur(2),0,1000)| () Bool)
(declare-fun |maction(refuel(tank1))| () Bool)
(declare-fun |required(ezcsp__sum(list(decr(2),2),ezcsp__eq,v(contrib(fuel_level,decr),2)))| () Bool)
(declare-fun |cspvar(v_initial(fuel_level,1),0,1000)| () Bool)
(declare-fun |261| () Bool)
(declare-fun |260| () Bool)
(declare-fun |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(1))))| () Bool)
(declare-fun |required(ezcsp__eq(ezcsp__mn(end(2),stime(refuel(tank1))),10))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr),3),0))| () Bool)
(declare-fun |occurs(end(refuel(tank1)),1)| () Bool)
(declare-fun |incr(3,v(contrib(fuel_level,incr,refuel(tank1)),3))| () Bool)
(declare-fun |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr),1),0,1000)| () Bool)
(declare-fun |duration(refuel(tank1),10)| () Bool)
(declare-fun |occurs(start(generate),0)| () Bool)
(declare-fun |required(ezcsp__geq(v_initial(fuel_level,1),0))| () Bool)
(declare-fun |some_action(2)| () Bool)
(declare-fun |cspvar(stime(refuel(tank1)),0,1000)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr),0),0,1000)| () Bool)
(declare-fun |required(ezcsp__leq(v_initial(fuel_level,2),1000))| () Bool)
(declare-fun |hold_s(generating,0)| () Bool)
(declare-fun |required(ezcsp__geq(end(0),start(0)))| () Bool)
(declare-fun |required(ezcsp__sum(list(incr(0),2),ezcsp__eq,v(contrib(fuel_level,incr),0)))| () Bool)
(declare-fun |195| () Bool)
(declare-fun |required(ezcsp__geq(v_final(fuel_level,2),0))| () Bool)
(declare-fun |holds(generating,2)| () Bool)
(declare-fun |holds(inprogr(generate),1)| () Bool)
(declare-fun |incr(0,v(contrib(fuel_level,incr,refuel(tank1)),0))| () Bool)
(declare-fun |duration(generate,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),0))| () Bool)
(declare-fun |cspdomain(r)| () Bool)
(declare-fun |required(ezcsp__geq(stime(refuel(tank1)),0))| () Bool)
(declare-fun |fluent(generating)| () Bool)
(declare-fun |cap(tank1,20)| () Bool)
(declare-fun |cspvar(start(2),0,1000)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr,generate),3),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr),0),0))| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr,generate),0),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(end(1),start(1)))| () Bool)
(declare-fun |cspvar(start(1),0,1000)| () Bool)
(declare-fun |tankcap(1000)| () Bool)
(declare-fun |required(ezcsp__geq(end(3),0))| () Bool)
(declare-fun |required(ezcsp__leq(v_initial(fuel_level,1),1000))| () Bool)
(declare-fun |required(ezcsp__leq(v_final(fuel_level,2),1000))| () Bool)
(declare-fun |decr(1,v(contrib(fuel_level,decr,generate),1))| () Bool)
(declare-fun |required(ezcsp__leq(v_final(fuel_level,0),1000))| () Bool)
(declare-fun |required(ezcsp__leq(v_initial(fuel_level,3),1000))| () Bool)
(declare-fun |required(ezcsp__geq(start(3),0))| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr),2),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(fuel_level,3),v_final(fuel_level,2)))| () Bool)
(declare-fun |holds(inprogr(refuel(tank1)),1)| () Bool)
(declare-fun |occurs(end(generate),1)| () Bool)
(declare-fun |cspvar(v_final(fuel_level,3),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v_final(fuel_level,0),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,0),v(contrib(fuel_level,incr),0)),v(contrib(fuel_level,decr),0))))| () Bool)
(declare-fun |holds(generating,3)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),2),0,1000)| () Bool)
(declare-fun |cspvar(v_final(fuel_level,1),0,1000)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr),0),0,1000)| () Bool)
(declare-fun |245| () Bool)
(declare-fun |244| () Bool)
(declare-fun |247| () Bool)
(declare-fun |246| () Bool)
(declare-fun |196| () Bool)
(declare-fun |240| () Bool)
(declare-fun |243| () Bool)
(declare-fun |242| () Bool)
(declare-fun |required(ezcsp__eq(stime(refuel(tank1)),end(0)))| () Bool)
(declare-fun |cspvar(stime(generate),0,1000)| () Bool)
(declare-fun |249| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),ezcsp__tm(1,ezcsp__mn(end(1),start(1)))))| () Bool)
(declare-fun |required(ezcsp__geq(start(1),0))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),1),0))| () Bool)
(declare-fun |cspvar(end(0),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(end(1),0))| () Bool)
(declare-fun |cspvar(end(3),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v_final(fuel_level,3),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,3),v(contrib(fuel_level,incr),3)),v(contrib(fuel_level,decr),3))))| () Bool)
(declare-fun |cspvar(v_initial(fuel_level,3),0,1000)| () Bool)
(declare-fun |241| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr),3),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(0))))| () Bool)
(declare-fun |cspvar(v_final(fuel_level,0),0,1000)| () Bool)
(declare-fun |cspvar(end(2),0,1000)| () Bool)
(declare-fun |required(ezcsp__sum(list(decr(1),2),ezcsp__eq,v(contrib(fuel_level,decr),1)))| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr),3),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(start(0),0))| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(fuel_level,0),990))| () Bool)
(declare-fun |required(ezcsp__geq(v_final(fuel_level,0),0))| () Bool)
(declare-fun |fluent(inprogr(generate))| () Bool)
(declare-fun |cspvar(start(3),0,1000)| () Bool)
(declare-fun |holds(inprogr(generate),3)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),0),0,1000)| () Bool)
(declare-fun |258| () Bool)
(declare-fun |259| () Bool)
(declare-fun |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))| () Bool)
(declare-fun |252| () Bool)
(declare-fun |253| () Bool)
(declare-fun |250| () Bool)
(declare-fun |251| () Bool)
(declare-fun |256| () Bool)
(declare-fun |257| () Bool)
(declare-fun |254| () Bool)
(declare-fun |255| () Bool)
(declare-fun |required(ezcsp__sum(list(incr(2),2),ezcsp__eq,v(contrib(fuel_level,incr),2)))| () Bool)
(declare-fun |occurs(end(generate),2)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr),2),0))| () Bool)
(declare-fun |ab(contrib(fuel_level,incr,refuel(tank1)),3)| () Bool)
(declare-fun |required(ezcsp__geq(v_final(fuel_level,1),0))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(1))))| () Bool)
(declare-fun |248| () Bool)
(declare-fun |holds(inprogr(refuel(tank1)),3)| () Bool)
(declare-fun |ab(contrib(fuel_level,decr,generate),3)| () Bool)
(declare-fun |required(ezcsp__geq(v_initial(fuel_level,3),0))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))| () Bool)
(declare-fun |197| () Bool)
(declare-fun |required(ezcsp__geq(end(2),0))| () Bool)
(declare-fun |hold_s(inprogr(refuel(tank1)),0)| () Bool)
(declare-fun |holds(generating,1)| () Bool)
(declare-fun |cspvar(v_final(fuel_level,2),0,1000)| () Bool)
(declare-fun |hold_s(generating,3)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr),1),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(0))))| () Bool)
(declare-fun |required_false(geq_flevel_0,0)| () Bool)
(declare-fun |required(ezcsp__geq(start(2),0))| () Bool)
(declare-fun |229| () Bool)
(declare-fun |occurs(start(refuel(tank1)),1)| () Bool)
(declare-fun |227| () Bool)
(declare-fun |226| () Bool)
(declare-fun |225| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr),1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(fuel_level,2),v_final(fuel_level,1)))| () Bool)
(declare-fun |required(ezcsp__leq(v_final(fuel_level,3),1000))| () Bool)
(declare-fun |tanklv(990)| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))| () Bool)
(declare-fun |hold_s(inprogr(generate),2)| () Bool)
(declare-fun |required(ezcsp__geq(end(3),start(3)))| () Bool)
(declare-fun |required(ezcsp__leq(v_initial(fuel_level,0),1000))| () Bool)
(declare-fun |ab(contrib(fuel_level,incr,refuel(tank1)),2)| () Bool)
(declare-fun |required(ezcsp__geq(v_initial(fuel_level,2),0))| () Bool)
(declare-fun |hold_s(inprogr(generate),0)| () Bool)
(declare-fun |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))| () Bool)
(declare-fun |ab(contrib(fuel_level,decr,generate),2)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))| () Bool)
(declare-fun |fluent(inprogr(refuel(tank1)))| () Bool)
(declare-fun |238| () Bool)
(declare-fun |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(0))))| () Bool)
(declare-fun |holds(inprogr(refuel(tank1)),2)| () Bool)
(declare-fun |step(1)| () Bool)
(declare-fun |150| () Bool)
(declare-fun |hold_s(inprogr(refuel(tank1)),1)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),1),0,1000)| () Bool)
(declare-fun |completed(generate,3)| () Bool)
(declare-fun |hold_s(generating,2)| () Bool)
(declare-fun |required_false(geq_flevel_0,1)| () Bool)
(declare-fun |step(3)| () Bool)
(declare-fun |incr(1,v(contrib(fuel_level,incr,refuel(tank1)),1))| () Bool)
(declare-fun |refuel_tank(tank1)| () Bool)
(declare-fun |required(ezcsp__sum(list(incr(1),2),ezcsp__eq,v(contrib(fuel_level,incr),1)))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))| () Bool)
(declare-fun |cspvar(start(0),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(stime(generate),0))| () Bool)
(declare-fun |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(1))))| () Bool)
(declare-fun |occurs(start(refuel(tank1)),0)| () Bool)
(declare-fun |239| () Bool)
(declare-fun |cspvar(dur(3),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(0))))| () Bool)
(declare-fun |234| () Bool)
(declare-fun |235| () Bool)
(declare-fun |236| () Bool)
(declare-fun |required(ezcsp__eq(stime(refuel(tank1)),end(1)))| () Bool)
(declare-fun |230| () Bool)
(declare-fun |231| () Bool)
(declare-fun |232| () Bool)
(declare-fun |required(ezcsp__lt(v_final(fuel_level,0),0))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),ezcsp__tm(2,ezcsp__mn(end(3),start(3)))))| () Bool)
(declare-fun |237| () Bool)
(declare-fun |hold_s(inprogr(generate),3)| () Bool)
(declare-fun |decr(0,v(contrib(fuel_level,decr,generate),0))| () Bool)
(declare-fun |required(ezcsp__eq(ezcsp__mn(end(2),stime(generate)),1000))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),ezcsp__tm(1,ezcsp__mn(end(3),start(3)))))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(fuel_level,1),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,1),v(contrib(fuel_level,incr),1)),v(contrib(fuel_level,decr),1))))| () Bool)
(declare-fun |ab(contrib(fuel_level,decr,generate),1)| () Bool)
(declare-fun |holds(inprogr(generate),2)| () Bool)
(declare-fun |required(ezcsp__eq(ezcsp__mn(end(1),stime(generate)),1000))| () Bool)
(declare-fun |required(ezcsp__eq(start(1),end(0)))| () Bool)
(declare-fun |ab(contrib(fuel_level,incr,refuel(tank1)),1)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,incr),1),0))| () Bool)
(declare-fun |required(ezcsp__eq(stime(generate),end(1)))| () Bool)
(declare-fun |233| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr),3),0,1000)| () Bool)
(declare-fun |completed(generate,2)| () Bool)
(declare-fun |decr(3,v(contrib(fuel_level,decr,generate),3))| () Bool)
(declare-fun |hold_s(generating,1)| () Bool)
(declare-fun |step(0)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),3),0,1000)| () Bool)
(declare-fun |hold_s(inprogr(refuel(tank1)),2)| () Bool)
(declare-fun |required(ezcsp__leq(v_final(fuel_level,1),1000))| () Bool)
(declare-fun |occurs(end(refuel(tank1)),2)| () Bool)
(declare-fun |step(2)| () Bool)
(declare-fun |required(ezcsp__geq(start(0),0))| () Bool)
(declare-fun |action(start(generate))| () Bool)
(declare-fun |required(ezcsp__sum(list(incr(3),2),ezcsp__eq,v(contrib(fuel_level,incr),3)))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),ezcsp__tm(2,ezcsp__mn(end(2),start(2)))))| () Bool)
(declare-fun |required(ezcsp__eq(start(3),end(2)))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),0))| () Bool)
(declare-fun |required(ezcsp__eq(v_final(fuel_level,2),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,2),v(contrib(fuel_level,incr),2)),v(contrib(fuel_level,decr),2))))| () Bool)
(declare-fun |action(end(generate))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),3),0))| () Bool)
(declare-fun |required(ezcsp__sum(list(decr(3),2),ezcsp__eq,v(contrib(fuel_level,decr),3)))| () Bool)
(declare-fun |cspvar(dur(0),0,1000)| () Bool)
(declare-fun |cspvar(v_initial(fuel_level,2),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),0),0))| () Bool)
(declare-fun |required(ezcsp__geq(end(0),0))| () Bool)
(declare-fun |some_action(0)| () Bool)
(declare-fun |required(ezcsp__eq(v_initial(fuel_level,1),v_final(fuel_level,0)))| () Bool)
(declare-fun |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),2),0))| () Bool)
(declare-fun |completed(refuel(tank1),2)| () Bool)
(declare-fun |maction(generate)| () Bool)
(declare-fun |cspvar(v(contrib(fuel_level,decr,generate),2),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))| () Bool)
(declare-fun |cspvar(v_initial(fuel_level,0),0,1000)| () Bool)
(declare-fun |cspvar(adur(refuel(tank1)),0,1000)| () Bool)
(declare-fun |required(ezcsp__geq(v_final(fuel_level,3),0))| () Bool)
(declare-fun |cspvar(end(1),0,1000)| () Bool)
(declare-fun |required(ezcsp__eq(start(2),end(1)))| () Bool)
(declare-fun |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),ezcsp__tm(1,ezcsp__mn(end(2),start(2)))))| () Bool)
(assert (or (not |occurs(end(refuel(tank1)),1)|) |hold_s(inprogr(refuel(tank1)),2)|))
(assert (or (not |241|) |hold_s(inprogr(refuel(tank1)),2)|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) (not |occurs(end(refuel(tank1)),1)|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |hold_s(inprogr(refuel(tank1)),3)|))
(assert (or (not |242|) |hold_s(inprogr(refuel(tank1)),3)|))
(assert (or (not |243|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |244|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) |holds(inprogr(refuel(tank1)),1)|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |245|) |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |holds(inprogr(refuel(tank1)),2)|) |holds(inprogr(refuel(tank1)),3)| |hold_s(inprogr(refuel(tank1)),3)|))
(assert (or |hold_s(generating,1)| |holds(generating,1)|))
(assert (or (not |occurs(start(generate),0)|) |holds(generating,1)|))
(assert (or |hold_s(inprogr(generate),1)| |holds(inprogr(generate),1)|))
(assert (or (not |occurs(start(generate),0)|) |holds(inprogr(generate),1)|))
(assert (or |hold_s(inprogr(refuel(tank1)),1)| |holds(inprogr(refuel(tank1)),1)|))
(assert (or (not |246|) |hold_s(generating,2)|))
(assert (or (not |occurs(end(generate),1)|) |hold_s(generating,2)|))
(assert (or (not |occurs(start(generate),1)|) |holds(generating,2)|))
(assert (or (not |247|) |holds(generating,2)|))
(assert (or (not |248|) |hold_s(inprogr(generate),2)|))
(assert (or (not |occurs(end(generate),1)|) |hold_s(inprogr(generate),2)|))
(assert (or (not |occurs(start(generate),1)|) |holds(inprogr(generate),2)|))
(assert (or (not |249|) |holds(inprogr(generate),2)|))
(assert (or (not |250|) |hold_s(generating,3)|))
(assert (or (not |occurs(end(generate),2)|) |hold_s(generating,3)|))
(assert (or (not |holds(generating,2)|) |holds(generating,3)| |hold_s(generating,3)|))
(assert (or (not |251|) |hold_s(inprogr(generate),3)|))
(assert (or (not |occurs(end(generate),2)|) |hold_s(inprogr(generate),3)|))
(assert (or (not |holds(inprogr(generate),2)|) |holds(inprogr(generate),3)| |hold_s(inprogr(generate),3)|))
(assert (or (not |occurs(start(generate),0)|) (not |occurs(end(generate),1)|) |occurs(end(generate),1)|))
(assert (or (not |252|) |occurs(end(generate),2)|))
(assert (or (not |253|) |occurs(end(generate),2)|))
(assert (or (not |occurs(start(generate),0)|) |occurs(start(generate),0)|))
(assert (or (not |hold_s(generating,1)|) (not |occurs(start(generate),1)|) |occurs(start(generate),1)|))
(assert (or (not |hold_s(inprogr(generate),1)|) (not |occurs(end(generate),1)|)))
(assert (or (not |hold_s(inprogr(generate),2)|) (not |occurs(end(generate),2)|)))
(assert (or (not |occurs(start(generate),0)|) (not |occurs(start(generate),1)|)))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |hold_s(inprogr(refuel(tank1)),1)|)))
(assert (or (not |hold_s(inprogr(refuel(tank1)),2)|) (not |occurs(end(refuel(tank1)),2)|)))
(assert (or (not |occurs(start(refuel(tank1)),0)|) (not |occurs(start(refuel(tank1)),1)|)))
(assert (or (not |occurs(start(refuel(tank1)),0)|) |228|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |occurs(start(generate),0)|) (not |required_false(geq_flevel_0,0)|)))
(assert (or (not |hold_s(generating,1)|) |234|))
(assert (or (not |hold_s(generating,2)|) |236|))
(assert (or (not |occurs(start(generate),0)|) |239|))
(assert (or (not |occurs(start(generate),1)|) |occurs(end(generate),2)|))
(assert (or (not |occurs(end(generate),1)|) |required(ezcsp__eq(ezcsp__mn(end(1),stime(generate)),1000))|))
(assert (or (not |occurs(end(generate),2)|) |required(ezcsp__eq(ezcsp__mn(end(2),stime(generate)),1000))|))
(assert (or (not |occurs(end(generate),1)|) |completed(generate,2)|))
(assert (or (not |occurs(end(generate),2)|) |completed(generate,3)|))
(assert (or (not |occurs(start(generate),0)|) |required(ezcsp__eq(stime(generate),end(0)))|))
(assert (or (not |occurs(start(generate),1)|) |required(ezcsp__eq(stime(generate),end(1)))|))
(assert (or (not |holds(inprogr(generate),1)|) |ab(contrib(fuel_level,decr,generate),1)|))
(assert (or (not |holds(inprogr(generate),2)|) |ab(contrib(fuel_level,decr,generate),2)|))
(assert (or (not |holds(inprogr(generate),3)|) |ab(contrib(fuel_level,decr,generate),3)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),0))| |ab(contrib(fuel_level,decr,generate),1)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),0))| |ab(contrib(fuel_level,decr,generate),2)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),0))| |ab(contrib(fuel_level,decr,generate),3)|))
(assert (or (not |holds(inprogr(generate),1)|) |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),ezcsp__tm(1,ezcsp__mn(end(1),start(1)))))|))
(assert (or (not |holds(inprogr(generate),2)|) |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),ezcsp__tm(1,ezcsp__mn(end(2),start(2)))))|))
(assert (or (not |holds(inprogr(generate),3)|) |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),ezcsp__tm(1,ezcsp__mn(end(3),start(3)))))|))
(assert (or (not |required_false(geq_flevel_0,0)|) |required(ezcsp__lt(v_final(fuel_level,0),0))|))
(assert (or (not |required_false(geq_flevel_0,0)|) |required_false(geq_flevel_0,0)|))
(assert (or (not |required_false(geq_flevel_0,1)|) |required(ezcsp__lt(v_final(fuel_level,1),0))|))
(assert (or (not |hold_s(generating,1)|) (not |required_false(geq_flevel_0,1)|) |required_false(geq_flevel_0,1)|))
(assert (or (not |required_false(geq_flevel_0,2)|) |required(ezcsp__lt(v_final(fuel_level,2),0))|))
(assert (or (not |hold_s(generating,2)|) (not |required_false(geq_flevel_0,2)|) |required_false(geq_flevel_0,2)|))
(assert (or (not |254|) |cspvar(adur(generate),0,1000)|))
(assert (or (not |255|) |cspvar(adur(generate),0,1000)|))
(assert (or (not |256|) |cspvar(adur(generate),0,1000)|))
(assert (or (not |257|) |cspvar(adur(generate),0,1000)|))
(assert (or (not |258|) |cspvar(adur(refuel(tank1)),0,1000)|))
(assert (or (not |259|) |cspvar(adur(refuel(tank1)),0,1000)|))
(assert (or (not |260|) |cspvar(adur(refuel(tank1)),0,1000)|))
(assert (or (not |261|) |cspvar(adur(refuel(tank1)),0,1000)|))
(assert (or (not |occurs(end(generate),1)|) (not |occurs(start(generate),0)|) |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(0))))|))
(assert (or (not |occurs(end(generate),2)|) (not |occurs(start(generate),0)|) |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(0))))|))
(assert (or (not |occurs(end(generate),1)|) (not |occurs(start(generate),1)|) |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(1))))|))
(assert (or (not |occurs(end(generate),2)|) (not |occurs(start(generate),1)|) |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(1))))|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |occurs(start(refuel(tank1)),0)|) |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(0))))|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) (not |occurs(start(refuel(tank1)),0)|) |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(0))))|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |occurs(start(refuel(tank1)),1)|) |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(1))))|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) (not |occurs(start(refuel(tank1)),1)|) |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(1))))|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) |195|))
(assert (or (not |occurs(start(generate),0)|) |195|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) |196|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |196|))
(assert (or (not |occurs(start(generate),1)|) |196|))
(assert (or (not |occurs(end(generate),1)|) |196|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |197|))
(assert (or (not |occurs(end(generate),2)|) |197|))
(assert (or (not |195|) |some_action(0)|))
(assert (or (not |196|) |some_action(1)|))
(assert (or (not |197|) |some_action(2)|))
(assert (or (not |completed(generate,2)|) |completed(generate)|))
(assert (or (not |completed(generate,3)|) |completed(generate)|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |required(ezcsp__eq(ezcsp__mn(end(1),stime(refuel(tank1))),10))|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |required(ezcsp__eq(ezcsp__mn(end(2),stime(refuel(tank1))),10))|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |completed(refuel(tank1),2)|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |completed(refuel(tank1),3)|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) |required(ezcsp__eq(stime(refuel(tank1)),end(0)))|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) |required(ezcsp__eq(stime(refuel(tank1)),end(1)))|))
(assert (or (not |holds(inprogr(refuel(tank1)),1)|) |ab(contrib(fuel_level,incr,refuel(tank1)),1)|))
(assert (or (not |holds(inprogr(refuel(tank1)),2)|) |ab(contrib(fuel_level,incr,refuel(tank1)),2)|))
(assert (or (not |holds(inprogr(refuel(tank1)),3)|) |ab(contrib(fuel_level,incr,refuel(tank1)),3)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))| |ab(contrib(fuel_level,incr,refuel(tank1)),1)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))| |ab(contrib(fuel_level,incr,refuel(tank1)),2)|))
(assert (or |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))| |ab(contrib(fuel_level,incr,refuel(tank1)),3)|))
(assert (or (not |holds(inprogr(refuel(tank1)),1)|) |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),ezcsp__tm(2,ezcsp__mn(end(1),start(1)))))|))
(assert (or (not |holds(inprogr(refuel(tank1)),2)|) |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),ezcsp__tm(2,ezcsp__mn(end(2),start(2)))))|))
(assert (or (not |holds(inprogr(refuel(tank1)),3)|) |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),ezcsp__tm(2,ezcsp__mn(end(3),start(3)))))|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |226|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |226|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |occurs(end(refuel(tank1)),2)|) |227|))
(assert (or (not |226|) |228| |227|))
(assert (or (not |occurs(start(generate),0)|) |230|))
(assert (or (not |required_false(geq_flevel_0,0)|) |230|))
(assert (or (not |230|) |231|))
(assert (or (not |occurs(start(generate),1)|) |232|))
(assert (or (not |required_false(geq_flevel_0,1)|) |232|))
(assert (or (not |occurs(start(generate),1)|) (not |required_false(geq_flevel_0,1)|) |233|))
(assert (or (not |232|) |234| |233|))
(assert (or (not |required_false(geq_flevel_0,2)|) |235|))
(assert (or (not |235|) |236|))
(assert (or (not |occurs(end(generate),1)|) |237|))
(assert (or (not |occurs(end(generate),2)|) |237|))
(assert (or (not |occurs(end(generate),1)|) (not |occurs(end(generate),2)|) |238|))
(assert (or (not |237|) |239| |238|))
(assert (or (not |241|) |hold_s(inprogr(refuel(tank1)),1)|))
(assert (or (not |241|) (not |holds(inprogr(refuel(tank1)),2)|)))
(assert (or (not |hold_s(inprogr(refuel(tank1)),1)|) |241| |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |hold_s(inprogr(refuel(tank1)),2)|) |occurs(end(refuel(tank1)),1)| |241|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |242|) |hold_s(inprogr(refuel(tank1)),2)|))
(assert (or (not |242|) (not |holds(inprogr(refuel(tank1)),3)|)))
(assert (or (not |hold_s(inprogr(refuel(tank1)),2)|) |242| |holds(inprogr(refuel(tank1)),3)|))
(assert (or (not |hold_s(inprogr(refuel(tank1)),3)|) |occurs(end(refuel(tank1)),2)| |242|))
(assert (or (not |243|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |243|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |occurs(start(refuel(tank1)),0)|) (not |occurs(end(refuel(tank1)),2)|) |243|))
(assert (or (not |244|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |244|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |occurs(start(refuel(tank1)),1)|) (not |occurs(end(refuel(tank1)),2)|) |244|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) |243| |244|))
(assert (or (not |holds(inprogr(refuel(tank1)),1)|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |245|) |holds(inprogr(refuel(tank1)),1)|))
(assert (or (not |245|) (not |hold_s(inprogr(refuel(tank1)),2)|)))
(assert (or (not |holds(inprogr(refuel(tank1)),1)|) |245| |hold_s(inprogr(refuel(tank1)),2)|))
(assert (or (not |holds(inprogr(refuel(tank1)),2)|) |occurs(start(refuel(tank1)),1)| |245|))
(assert (or (not |holds(inprogr(refuel(tank1)),3)|) |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |holds(inprogr(refuel(tank1)),3)|) (not |hold_s(inprogr(refuel(tank1)),3)|)))
(assert (or (not |hold_s(generating,1)|) (not |holds(generating,1)|)))
(assert (or (not |holds(generating,1)|) |occurs(start(generate),0)|))
(assert (or (not |hold_s(inprogr(generate),1)|) (not |holds(inprogr(generate),1)|)))
(assert (or (not |holds(inprogr(generate),1)|) |occurs(start(generate),0)|))
(assert (or (not |hold_s(inprogr(refuel(tank1)),1)|) (not |holds(inprogr(refuel(tank1)),1)|)))
(assert (or (not |246|) |hold_s(generating,1)|))
(assert (or (not |246|) (not |holds(generating,2)|)))
(assert (or (not |hold_s(generating,1)|) |246| |holds(generating,2)|))
(assert (or (not |hold_s(generating,2)|) |246| |occurs(end(generate),1)|))
(assert (or (not |247|) |holds(generating,1)|))
(assert (or (not |247|) (not |hold_s(generating,2)|)))
(assert (or (not |holds(generating,1)|) |247| |hold_s(generating,2)|))
(assert (or (not |holds(generating,2)|) |occurs(start(generate),1)| |247|))
(assert (or (not |248|) |hold_s(inprogr(generate),1)|))
(assert (or (not |248|) (not |holds(inprogr(generate),2)|)))
(assert (or (not |hold_s(inprogr(generate),1)|) |248| |holds(inprogr(generate),2)|))
(assert (or (not |hold_s(inprogr(generate),2)|) |248| |occurs(end(generate),1)|))
(assert (or (not |249|) |holds(inprogr(generate),1)|))
(assert (or (not |249|) (not |hold_s(inprogr(generate),2)|)))
(assert (or (not |holds(inprogr(generate),1)|) |249| |hold_s(inprogr(generate),2)|))
(assert (or (not |holds(inprogr(generate),2)|) |occurs(start(generate),1)| |249|))
(assert (or (not |250|) |hold_s(generating,2)|))
(assert (or (not |250|) (not |holds(generating,3)|)))
(assert (or (not |hold_s(generating,2)|) |250| |holds(generating,3)|))
(assert (or (not |hold_s(generating,3)|) |250| |occurs(end(generate),2)|))
(assert (or (not |holds(generating,3)|) |holds(generating,2)|))
(assert (or (not |holds(generating,3)|) (not |hold_s(generating,3)|)))
(assert (or (not |251|) |hold_s(inprogr(generate),2)|))
(assert (or (not |251|) (not |holds(inprogr(generate),3)|)))
(assert (or (not |hold_s(inprogr(generate),2)|) |251| |holds(inprogr(generate),3)|))
(assert (or (not |hold_s(inprogr(generate),3)|) |251| |occurs(end(generate),2)|))
(assert (or (not |holds(inprogr(generate),3)|) |holds(inprogr(generate),2)|))
(assert (or (not |holds(inprogr(generate),3)|) (not |hold_s(inprogr(generate),3)|)))
(assert (or (not |occurs(end(generate),1)|) |occurs(start(generate),0)|))
(assert (or (not |occurs(end(generate),1)|) |occurs(end(generate),1)|))
(assert (or (not |252|) |occurs(start(generate),0)|))
(assert (or (not |252|) |occurs(end(generate),2)|))
(assert (or (not |occurs(start(generate),0)|) (not |occurs(end(generate),2)|) |252|))
(assert (or (not |253|) |occurs(start(generate),1)|))
(assert (or (not |253|) |occurs(end(generate),2)|))
(assert (or (not |occurs(start(generate),1)|) (not |occurs(end(generate),2)|) |253|))
(assert (or (not |occurs(end(generate),2)|) |252| |253|))
(assert (or (not |occurs(start(generate),1)|) |hold_s(generating,1)|))
(assert (or (not |occurs(start(generate),1)|) |occurs(start(generate),1)|))
(assert (or (not |required(ezcsp__eq(ezcsp__mn(end(1),stime(generate)),1000))|) |occurs(end(generate),1)|))
(assert (or (not |required(ezcsp__eq(ezcsp__mn(end(2),stime(generate)),1000))|) |occurs(end(generate),2)|))
(assert (or (not |completed(generate,2)|) |occurs(end(generate),1)|))
(assert (or (not |completed(generate,3)|) |occurs(end(generate),2)|))
(assert (or (not |required(ezcsp__eq(stime(generate),end(0)))|) |occurs(start(generate),0)|))
(assert (or (not |required(ezcsp__eq(stime(generate),end(1)))|) |occurs(start(generate),1)|))
(assert (or (not |ab(contrib(fuel_level,decr,generate),1)|) |holds(inprogr(generate),1)|))
(assert (or (not |ab(contrib(fuel_level,decr,generate),2)|) |holds(inprogr(generate),2)|))
(assert (or (not |ab(contrib(fuel_level,decr,generate),3)|) |holds(inprogr(generate),3)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),0))|) (not |ab(contrib(fuel_level,decr,generate),1)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),0))|) (not |ab(contrib(fuel_level,decr,generate),2)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),0))|) (not |ab(contrib(fuel_level,decr,generate),3)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),ezcsp__tm(1,ezcsp__mn(end(1),start(1)))))|) |holds(inprogr(generate),1)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),ezcsp__tm(1,ezcsp__mn(end(2),start(2)))))|) |holds(inprogr(generate),2)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),ezcsp__tm(1,ezcsp__mn(end(3),start(3)))))|) |holds(inprogr(generate),3)|))
(assert (or (not |required(ezcsp__lt(v_final(fuel_level,0),0))|) |required_false(geq_flevel_0,0)|))
(assert (or (not |required(ezcsp__lt(v_final(fuel_level,1),0))|) |required_false(geq_flevel_0,1)|))
(assert (or (not |required_false(geq_flevel_0,1)|) |hold_s(generating,1)|))
(assert (or (not |required_false(geq_flevel_0,1)|) |required_false(geq_flevel_0,1)|))
(assert (or (not |required(ezcsp__lt(v_final(fuel_level,2),0))|) |required_false(geq_flevel_0,2)|))
(assert (or (not |required_false(geq_flevel_0,2)|) |hold_s(generating,2)|))
(assert (or (not |required_false(geq_flevel_0,2)|) |required_false(geq_flevel_0,2)|))
(assert (or (not |254|) |occurs(end(generate),1)|))
(assert (or (not |254|) |occurs(start(generate),0)|))
(assert (or (not |occurs(end(generate),1)|) (not |occurs(start(generate),0)|) |254|))
(assert (or (not |255|) |occurs(end(generate),2)|))
(assert (or (not |255|) |occurs(start(generate),0)|))
(assert (or (not |occurs(end(generate),2)|) (not |occurs(start(generate),0)|) |255|))
(assert (or (not |256|) |occurs(end(generate),1)|))
(assert (or (not |256|) |occurs(start(generate),1)|))
(assert (or (not |occurs(end(generate),1)|) (not |occurs(start(generate),1)|) |256|))
(assert (or (not |257|) |occurs(end(generate),2)|))
(assert (or (not |257|) |occurs(start(generate),1)|))
(assert (or (not |occurs(end(generate),2)|) (not |occurs(start(generate),1)|) |257|))
(assert (or (not |cspvar(adur(generate),0,1000)|) |254| |255| |256| |257|))
(assert (or (not |258|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |258|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |occurs(start(refuel(tank1)),0)|) |258|))
(assert (or (not |259|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |259|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) (not |occurs(start(refuel(tank1)),0)|) |259|))
(assert (or (not |260|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |260|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |occurs(end(refuel(tank1)),1)|) (not |occurs(start(refuel(tank1)),1)|) |260|))
(assert (or (not |261|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |261|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |occurs(end(refuel(tank1)),2)|) (not |occurs(start(refuel(tank1)),1)|) |261|))
(assert (or (not |cspvar(adur(refuel(tank1)),0,1000)|) |258| |259| |260| |261|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(0))))|) |occurs(end(generate),1)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(0))))|) |occurs(start(generate),0)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(0))))|) |occurs(end(generate),2)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(0))))|) |occurs(start(generate),0)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(1))))|) |occurs(end(generate),1)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(1))))|) |occurs(start(generate),1)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(1))))|) |occurs(end(generate),2)|))
(assert (or (not |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(1))))|) |occurs(start(generate),1)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(0))))|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(0))))|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(0))))|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(0))))|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(1))))|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(1))))|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(1))))|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(1))))|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |195|) |occurs(start(refuel(tank1)),0)| |occurs(start(generate),0)|))
(assert (or (not |196|) |occurs(start(refuel(tank1)),1)| |occurs(end(refuel(tank1)),1)| |occurs(start(generate),1)| |occurs(end(generate),1)|))
(assert (or (not |197|) |occurs(end(refuel(tank1)),2)| |occurs(end(generate),2)|))
(assert (or (not |some_action(0)|) |195|))
(assert (or (not |some_action(1)|) |196|))
(assert (or (not |some_action(2)|) |197|))
(assert (or (not |completed(generate)|) |completed(generate,2)| |completed(generate,3)|))
(assert (or (not |required(ezcsp__eq(ezcsp__mn(end(1),stime(refuel(tank1))),10))|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |required(ezcsp__eq(ezcsp__mn(end(2),stime(refuel(tank1))),10))|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |completed(refuel(tank1),2)|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |completed(refuel(tank1),3)|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |required(ezcsp__eq(stime(refuel(tank1)),end(0)))|) |occurs(start(refuel(tank1)),0)|))
(assert (or (not |required(ezcsp__eq(stime(refuel(tank1)),end(1)))|) |occurs(start(refuel(tank1)),1)|))
(assert (or (not |ab(contrib(fuel_level,incr,refuel(tank1)),1)|) |holds(inprogr(refuel(tank1)),1)|))
(assert (or (not |ab(contrib(fuel_level,incr,refuel(tank1)),2)|) |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |ab(contrib(fuel_level,incr,refuel(tank1)),3)|) |holds(inprogr(refuel(tank1)),3)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))|) (not |ab(contrib(fuel_level,incr,refuel(tank1)),1)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))|) (not |ab(contrib(fuel_level,incr,refuel(tank1)),2)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))|) (not |ab(contrib(fuel_level,incr,refuel(tank1)),3)|)))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),ezcsp__tm(2,ezcsp__mn(end(1),start(1)))))|) |holds(inprogr(refuel(tank1)),1)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),ezcsp__tm(2,ezcsp__mn(end(2),start(2)))))|) |holds(inprogr(refuel(tank1)),2)|))
(assert (or (not |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),ezcsp__tm(2,ezcsp__mn(end(3),start(3)))))|) |holds(inprogr(refuel(tank1)),3)|))
(assert (or (not |226|) |occurs(end(refuel(tank1)),1)| |occurs(end(refuel(tank1)),2)|))
(assert (or (not |227|) |occurs(end(refuel(tank1)),1)|))
(assert (or (not |227|) |occurs(end(refuel(tank1)),2)|))
(assert (or (not |228|) |226|))
(assert (or (not |228|) (not |227|)))
(assert (or (not |230|) |occurs(start(generate),0)| |required_false(geq_flevel_0,0)|))
(assert (or (not |231|) |230|))
(assert (or (not |232|) |occurs(start(generate),1)| |required_false(geq_flevel_0,1)|))
(assert (or (not |233|) |occurs(start(generate),1)|))
(assert (or (not |233|) |required_false(geq_flevel_0,1)|))
(assert (or (not |234|) |232|))
(assert (or (not |234|) (not |233|)))
(assert (or (not |235|) |required_false(geq_flevel_0,2)|))
(assert (or (not |236|) |235|))
(assert (or (not |237|) |occurs(end(generate),1)| |occurs(end(generate),2)|))
(assert (or (not |238|) |occurs(end(generate),1)|))
(assert (or (not |238|) |occurs(end(generate),2)|))
(assert (or (not |239|) |237|))
(assert (or (not |239|) (not |238|)))
(assert |duration(generate,1000)|)
(assert |tankcap(1000)|)
(assert |tanklv(990)|)
(assert |refuel_tank(tank1)|)
(assert |cspdomain(r)|)
(assert |fluent(inprogr(generate))|)
(assert |fluent(generating)|)
(assert |hold_s(generating,0)|)
(assert |cspvar(stime(generate),0,1000)|)
(assert |required(ezcsp__geq(stime(generate),0))|)
(assert |action(start(generate))|)
(assert |action(end(generate))|)
(assert |restricted_ineq(lp)|)
(assert |restricted_ineq(nlp)|)
(assert |required(ezcsp__eq(start(0),0))|)
(assert |hold_s(inprogr(generate),0)|)
(assert |step(0)|)
(assert |step(1)|)
(assert |step(2)|)
(assert |step(3)|)
(assert |maxintval(1000)|)
(assert |cap(tank1,20)|)
(assert |duration(refuel(tank1),10)|)
(assert |cspvar(start(0),0,1000)|)
(assert |cspvar(start(1),0,1000)|)
(assert |cspvar(start(2),0,1000)|)
(assert |cspvar(start(3),0,1000)|)
(assert |required(ezcsp__geq(start(0),0))|)
(assert |required(ezcsp__geq(start(1),0))|)
(assert |required(ezcsp__geq(start(2),0))|)
(assert |required(ezcsp__geq(start(3),0))|)
(assert |cspvar(end(0),0,1000)|)
(assert |cspvar(end(1),0,1000)|)
(assert |cspvar(end(2),0,1000)|)
(assert |cspvar(end(3),0,1000)|)
(assert |required(ezcsp__geq(end(0),0))|)
(assert |required(ezcsp__geq(end(1),0))|)
(assert |required(ezcsp__geq(end(2),0))|)
(assert |required(ezcsp__geq(end(3),0))|)
(assert |required(ezcsp__eq(start(1),end(0)))|)
(assert |required(ezcsp__eq(start(2),end(1)))|)
(assert |required(ezcsp__eq(start(3),end(2)))|)
(assert |required(ezcsp__geq(end(0),start(0)))|)
(assert |required(ezcsp__geq(end(1),start(1)))|)
(assert |required(ezcsp__geq(end(2),start(2)))|)
(assert |required(ezcsp__geq(end(3),start(3)))|)
(assert |hold_s(inprogr(refuel(tank1)),0)|)
(assert |fluent(inprogr(refuel(tank1)))|)
(assert |cspvar(v_initial(fuel_level,0),0,1000)|)
(assert |cspvar(v_initial(fuel_level,1),0,1000)|)
(assert |cspvar(v_initial(fuel_level,2),0,1000)|)
(assert |cspvar(v_initial(fuel_level,3),0,1000)|)
(assert |required(ezcsp__geq(v_initial(fuel_level,0),0))|)
(assert |required(ezcsp__geq(v_initial(fuel_level,1),0))|)
(assert |required(ezcsp__geq(v_initial(fuel_level,2),0))|)
(assert |required(ezcsp__geq(v_initial(fuel_level,3),0))|)
(assert |required(ezcsp__leq(v_initial(fuel_level,0),1000))|)
(assert |required(ezcsp__leq(v_initial(fuel_level,1),1000))|)
(assert |required(ezcsp__leq(v_initial(fuel_level,2),1000))|)
(assert |required(ezcsp__leq(v_initial(fuel_level,3),1000))|)
(assert |cspvar(v_final(fuel_level,0),0,1000)|)
(assert |cspvar(v_final(fuel_level,1),0,1000)|)
(assert |cspvar(v_final(fuel_level,2),0,1000)|)
(assert |cspvar(v_final(fuel_level,3),0,1000)|)
(assert |required(ezcsp__geq(v_final(fuel_level,0),0))|)
(assert |required(ezcsp__geq(v_final(fuel_level,1),0))|)
(assert |required(ezcsp__geq(v_final(fuel_level,2),0))|)
(assert |required(ezcsp__geq(v_final(fuel_level,3),0))|)
(assert |required(ezcsp__leq(v_final(fuel_level,0),1000))|)
(assert |required(ezcsp__leq(v_final(fuel_level,1),1000))|)
(assert |required(ezcsp__leq(v_final(fuel_level,2),1000))|)
(assert |required(ezcsp__leq(v_final(fuel_level,3),1000))|)
(assert |required(ezcsp__eq(v_initial(fuel_level,1),v_final(fuel_level,0)))|)
(assert |required(ezcsp__eq(v_initial(fuel_level,2),v_final(fuel_level,1)))|)
(assert |required(ezcsp__eq(v_initial(fuel_level,3),v_final(fuel_level,2)))|)
(assert |cspvar(v(contrib(fuel_level,incr),0),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr),1),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr),2),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr),3),0,1000)|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr),0),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr),1),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr),2),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr),3),0))|)
(assert |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),0),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),1),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),2),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,incr,refuel(tank1)),3),0,1000)|)
(assert |incr(0,v(contrib(fuel_level,incr,refuel(tank1)),0))|)
(assert |incr(1,v(contrib(fuel_level,incr,refuel(tank1)),1))|)
(assert |incr(2,v(contrib(fuel_level,incr,refuel(tank1)),2))|)
(assert |incr(3,v(contrib(fuel_level,incr,refuel(tank1)),3))|)
(assert |required(ezcsp__sum(list(incr(0),2),ezcsp__eq,v(contrib(fuel_level,incr),0)))|)
(assert |required(ezcsp__sum(list(incr(1),2),ezcsp__eq,v(contrib(fuel_level,incr),1)))|)
(assert |required(ezcsp__sum(list(incr(2),2),ezcsp__eq,v(contrib(fuel_level,incr),2)))|)
(assert |required(ezcsp__sum(list(incr(3),2),ezcsp__eq,v(contrib(fuel_level,incr),3)))|)
(assert |cspvar(v(contrib(fuel_level,decr),0),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr),1),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr),2),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr),3),0,1000)|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr),0),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr),1),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr),2),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr),3),0))|)
(assert |cspvar(v(contrib(fuel_level,decr,generate),0),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr,generate),1),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr,generate),2),0,1000)|)
(assert |cspvar(v(contrib(fuel_level,decr,generate),3),0,1000)|)
(assert |decr(0,v(contrib(fuel_level,decr,generate),0))|)
(assert |decr(1,v(contrib(fuel_level,decr,generate),1))|)
(assert |decr(2,v(contrib(fuel_level,decr,generate),2))|)
(assert |decr(3,v(contrib(fuel_level,decr,generate),3))|)
(assert |required(ezcsp__sum(list(decr(0),2),ezcsp__eq,v(contrib(fuel_level,decr),0)))|)
(assert |required(ezcsp__sum(list(decr(1),2),ezcsp__eq,v(contrib(fuel_level,decr),1)))|)
(assert |required(ezcsp__sum(list(decr(2),2),ezcsp__eq,v(contrib(fuel_level,decr),2)))|)
(assert |required(ezcsp__sum(list(decr(3),2),ezcsp__eq,v(contrib(fuel_level,decr),3)))|)
(assert |required(ezcsp__eq(v_final(fuel_level,0),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,0),v(contrib(fuel_level,incr),0)),v(contrib(fuel_level,decr),0))))|)
(assert |required(ezcsp__eq(v_final(fuel_level,1),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,1),v(contrib(fuel_level,incr),1)),v(contrib(fuel_level,decr),1))))|)
(assert |required(ezcsp__eq(v_final(fuel_level,2),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,2),v(contrib(fuel_level,incr),2)),v(contrib(fuel_level,decr),2))))|)
(assert |required(ezcsp__eq(v_final(fuel_level,3),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,3),v(contrib(fuel_level,incr),3)),v(contrib(fuel_level,decr),3))))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),0),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),1),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),2),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),3),0))|)
(assert (not |150|))
(assert |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),0),0))|)
(assert |action(end(refuel(tank1)))|)
(assert |action(start(refuel(tank1)))|)
(assert |maction(generate)|)
(assert |maction(refuel(tank1))|)
(assert |cspvar(dur(0),0,1000)|)
(assert |cspvar(dur(1),0,1000)|)
(assert |cspvar(dur(2),0,1000)|)
(assert |cspvar(dur(3),0,1000)|)
(assert |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))|)
(assert |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))|)
(assert |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))|)
(assert |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))|)
(assert |195|)
(assert |196|)
(assert |197|)
(assert |some_action(0)|)
(assert |some_action(1)|)
(assert |some_action(2)|)
(assert |cspvar(stime(refuel(tank1)),0,1000)|)
(assert |required(ezcsp__geq(stime(refuel(tank1)),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))|)
(assert |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))|)
(assert |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))|)
(assert |required(ezcsp__eq(v_initial(fuel_level,0),990))|)
(assert |225|)
(assert |229|)
(assert |230|)
(assert |231|)
(assert |240|)
(declare-fun |dur(1)| () Real)
(assert (<= 0 |dur(1)|))
(assert (>= 1000 |dur(1)|))

(declare-fun |v(contrib(fuel_level,decr),2)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr),2)|))
(assert (>= 1000 |v(contrib(fuel_level,decr),2)|))

(declare-fun |adur(generate)| () Real)
(assert (<= 0 |adur(generate)|))
(assert (>= 1000 |adur(generate)|))

(declare-fun |v(contrib(fuel_level,decr,generate),1)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr,generate),1)|))
(assert (>= 1000 |v(contrib(fuel_level,decr,generate),1)|))

(declare-fun |dur(2)| () Real)
(assert (<= 0 |dur(2)|))
(assert (>= 1000 |dur(2)|))

(declare-fun |v_initial(fuel_level,1)| () Real)
(assert (<= 0 |v_initial(fuel_level,1)|))
(assert (>= 1000 |v_initial(fuel_level,1)|))

(declare-fun |v(contrib(fuel_level,incr),1)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr),1)|))
(assert (>= 1000 |v(contrib(fuel_level,incr),1)|))

(declare-fun |stime(refuel(tank1))| () Real)
(assert (<= 0 |stime(refuel(tank1))|))
(assert (>= 1000 |stime(refuel(tank1))|))

(declare-fun |v(contrib(fuel_level,incr),0)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr),0)|))
(assert (>= 1000 |v(contrib(fuel_level,incr),0)|))

(declare-fun |start(2)| () Real)
(assert (<= 0 |start(2)|))
(assert (>= 1000 |start(2)|))

(declare-fun |v(contrib(fuel_level,decr,generate),3)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr,generate),3)|))
(assert (>= 1000 |v(contrib(fuel_level,decr,generate),3)|))

(declare-fun |v(contrib(fuel_level,decr,generate),0)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr,generate),0)|))
(assert (>= 1000 |v(contrib(fuel_level,decr,generate),0)|))

(declare-fun |start(1)| () Real)
(assert (<= 0 |start(1)|))
(assert (>= 1000 |start(1)|))

(declare-fun |v(contrib(fuel_level,incr),2)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr),2)|))
(assert (>= 1000 |v(contrib(fuel_level,incr),2)|))

(declare-fun |v_final(fuel_level,3)| () Real)
(assert (<= 0 |v_final(fuel_level,3)|))
(assert (>= 1000 |v_final(fuel_level,3)|))

(declare-fun |v(contrib(fuel_level,incr,refuel(tank1)),2)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr,refuel(tank1)),2)|))
(assert (>= 1000 |v(contrib(fuel_level,incr,refuel(tank1)),2)|))

(declare-fun |v_final(fuel_level,1)| () Real)
(assert (<= 0 |v_final(fuel_level,1)|))
(assert (>= 1000 |v_final(fuel_level,1)|))

(declare-fun |v(contrib(fuel_level,decr),0)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr),0)|))
(assert (>= 1000 |v(contrib(fuel_level,decr),0)|))

(declare-fun |stime(generate)| () Real)
(assert (<= 0 |stime(generate)|))
(assert (>= 1000 |stime(generate)|))

(declare-fun |end(0)| () Real)
(assert (<= 0 |end(0)|))
(assert (>= 1000 |end(0)|))

(declare-fun |end(3)| () Real)
(assert (<= 0 |end(3)|))
(assert (>= 1000 |end(3)|))

(declare-fun |v_initial(fuel_level,3)| () Real)
(assert (<= 0 |v_initial(fuel_level,3)|))
(assert (>= 1000 |v_initial(fuel_level,3)|))

(declare-fun |v_final(fuel_level,0)| () Real)
(assert (<= 0 |v_final(fuel_level,0)|))
(assert (>= 1000 |v_final(fuel_level,0)|))

(declare-fun |end(2)| () Real)
(assert (<= 0 |end(2)|))
(assert (>= 1000 |end(2)|))

(declare-fun |v(contrib(fuel_level,decr),3)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr),3)|))
(assert (>= 1000 |v(contrib(fuel_level,decr),3)|))

(declare-fun |start(3)| () Real)
(assert (<= 0 |start(3)|))
(assert (>= 1000 |start(3)|))

(declare-fun |v(contrib(fuel_level,incr,refuel(tank1)),0)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr,refuel(tank1)),0)|))
(assert (>= 1000 |v(contrib(fuel_level,incr,refuel(tank1)),0)|))

(declare-fun |v_final(fuel_level,2)| () Real)
(assert (<= 0 |v_final(fuel_level,2)|))
(assert (>= 1000 |v_final(fuel_level,2)|))

(declare-fun |v(contrib(fuel_level,decr),1)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr),1)|))
(assert (>= 1000 |v(contrib(fuel_level,decr),1)|))

(declare-fun |v(contrib(fuel_level,incr,refuel(tank1)),1)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr,refuel(tank1)),1)|))
(assert (>= 1000 |v(contrib(fuel_level,incr,refuel(tank1)),1)|))

(declare-fun |start(0)| () Real)
(assert (<= 0 |start(0)|))
(assert (>= 1000 |start(0)|))

(declare-fun |dur(3)| () Real)
(assert (<= 0 |dur(3)|))
(assert (>= 1000 |dur(3)|))

(declare-fun |v(contrib(fuel_level,incr),3)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr),3)|))
(assert (>= 1000 |v(contrib(fuel_level,incr),3)|))

(declare-fun |v(contrib(fuel_level,incr,refuel(tank1)),3)| () Real)
(assert (<= 0 |v(contrib(fuel_level,incr,refuel(tank1)),3)|))
(assert (>= 1000 |v(contrib(fuel_level,incr,refuel(tank1)),3)|))

(declare-fun |dur(0)| () Real)
(assert (<= 0 |dur(0)|))
(assert (>= 1000 |dur(0)|))

(declare-fun |v_initial(fuel_level,2)| () Real)
(assert (<= 0 |v_initial(fuel_level,2)|))
(assert (>= 1000 |v_initial(fuel_level,2)|))

(declare-fun |v(contrib(fuel_level,decr,generate),2)| () Real)
(assert (<= 0 |v(contrib(fuel_level,decr,generate),2)|))
(assert (>= 1000 |v(contrib(fuel_level,decr,generate),2)|))

(declare-fun |v_initial(fuel_level,0)| () Real)
(assert (<= 0 |v_initial(fuel_level,0)|))
(assert (>= 1000 |v_initial(fuel_level,0)|))

(declare-fun |adur(refuel(tank1))| () Real)
(assert (<= 0 |adur(refuel(tank1))|))
(assert (>= 1000 |adur(refuel(tank1))|))

(declare-fun |end(1)| () Real)
(assert (<= 0 |end(1)|))
(assert (>= 1000 |end(1)|))

(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),0),0))| (= |v(contrib(fuel_level,decr,generate),0)|  0)))
(assert (=> |required(ezcsp__eq(stime(generate),end(0)))| (= |stime(generate)|  |end(0)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr),2),0))| (>= |v(contrib(fuel_level,decr),2)|  0)))
(assert (=> |required(ezcsp__lt(v_final(fuel_level,1),0))| (< |v_final(fuel_level,1)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),0))| (= |v(contrib(fuel_level,decr,generate),3)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),ezcsp__tm(2,ezcsp__mn(end(1),start(1)))))| (= |v(contrib(fuel_level,incr,refuel(tank1)),1)| (* 2(- |end(1)|  |start(1)| )))))
(assert (=> |required(ezcsp__geq(end(2),start(2)))| (>= |end(2)|  |start(2)| )))
(assert (=> |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(1))))| (= |adur(generate)| (- |end(2)|  |end(1)| ))))
(assert (=> |required(ezcsp__eq(ezcsp__mn(end(1),stime(refuel(tank1))),10))| (=(- |end(1)|  |stime(refuel(tank1))| ) 10)))
(assert (=> |required(ezcsp__lt(v_final(fuel_level,2),0))| (< |v_final(fuel_level,2)|  0)))
(assert (=> |required(ezcsp__sum(list(decr(0),2),ezcsp__eq,v(contrib(fuel_level,decr),0)))| (= |v(contrib(fuel_level,decr,generate),0)|  |v(contrib(fuel_level,decr),0)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr),0),0))| (>= |v(contrib(fuel_level,incr),0)|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))| (>= |v(contrib(fuel_level,incr,refuel(tank1)),3)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))| (= |v(contrib(fuel_level,incr,refuel(tank1)),1)|  0)))
(assert (=> |required(ezcsp__geq(v_initial(fuel_level,0),0))| (>= |v_initial(fuel_level,0)|  0)))
(assert (=> |required(ezcsp__sum(list(decr(2),2),ezcsp__eq,v(contrib(fuel_level,decr),2)))| (= |v(contrib(fuel_level,decr,generate),2)|  |v(contrib(fuel_level,decr),2)| )))
(assert (=> |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(1))))| (= |adur(generate)| (- |end(1)|  |end(1)| ))))
(assert (=> |required(ezcsp__eq(ezcsp__mn(end(2),stime(refuel(tank1))),10))| (=(- |end(2)|  |stime(refuel(tank1))| ) 10)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr),3),0))| (>= |v(contrib(fuel_level,decr),3)|  0)))
(assert (=> |required(ezcsp__eq(dur(0),ezcsp__mn(end(0),start(0))))| (= |dur(0)| (- |end(0)|  |start(0)| ))))
(assert (=> |required(ezcsp__geq(v_initial(fuel_level,1),0))| (>= |v_initial(fuel_level,1)|  0)))
(assert (=> |required(ezcsp__leq(v_initial(fuel_level,2),1000))| (<= |v_initial(fuel_level,2)|  1000)))
(assert (=> |required(ezcsp__geq(end(0),start(0)))| (>= |end(0)|  |start(0)| )))
(assert (=> |required(ezcsp__sum(list(incr(0),2),ezcsp__eq,v(contrib(fuel_level,incr),0)))| (= |v(contrib(fuel_level,incr,refuel(tank1)),0)|  |v(contrib(fuel_level,incr),0)| )))
(assert (=> |required(ezcsp__geq(v_final(fuel_level,2),0))| (>= |v_final(fuel_level,2)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),0))| (= |v(contrib(fuel_level,decr,generate),2)|  0)))
(assert (=> |required(ezcsp__geq(stime(refuel(tank1)),0))| (>= |stime(refuel(tank1))|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr),0),0))| (>= |v(contrib(fuel_level,decr),0)|  0)))
(assert (=> |required(ezcsp__geq(end(1),start(1)))| (>= |end(1)|  |start(1)| )))
(assert (=> |required(ezcsp__geq(end(3),0))| (>= |end(3)|  0)))
(assert (=> |required(ezcsp__leq(v_initial(fuel_level,1),1000))| (<= |v_initial(fuel_level,1)|  1000)))
(assert (=> |required(ezcsp__leq(v_final(fuel_level,2),1000))| (<= |v_final(fuel_level,2)|  1000)))
(assert (=> |required(ezcsp__leq(v_final(fuel_level,0),1000))| (<= |v_final(fuel_level,0)|  1000)))
(assert (=> |required(ezcsp__leq(v_initial(fuel_level,3),1000))| (<= |v_initial(fuel_level,3)|  1000)))
(assert (=> |required(ezcsp__geq(start(3),0))| (>= |start(3)|  0)))
(assert (=> |required(ezcsp__eq(v_initial(fuel_level,3),v_final(fuel_level,2)))| (= |v_initial(fuel_level,3)|  |v_final(fuel_level,2)| )))
(assert (=> |required(ezcsp__eq(v_final(fuel_level,0),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,0),v(contrib(fuel_level,incr),0)),v(contrib(fuel_level,decr),0))))| (= |v_final(fuel_level,0)| (-(+ |v_initial(fuel_level,0)|  |v(contrib(fuel_level,incr),0)| ) |v(contrib(fuel_level,decr),0)| ))))
(assert (=> |required(ezcsp__eq(stime(refuel(tank1)),end(0)))| (= |stime(refuel(tank1))|  |end(0)| )))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),ezcsp__tm(1,ezcsp__mn(end(1),start(1)))))| (= |v(contrib(fuel_level,decr,generate),1)| (* 1(- |end(1)|  |start(1)| )))))
(assert (=> |required(ezcsp__geq(start(1),0))| (>= |start(1)|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),1),0))| (>= |v(contrib(fuel_level,decr,generate),1)|  0)))
(assert (=> |required(ezcsp__geq(end(1),0))| (>= |end(1)|  0)))
(assert (=> |required(ezcsp__eq(v_final(fuel_level,3),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,3),v(contrib(fuel_level,incr),3)),v(contrib(fuel_level,decr),3))))| (= |v_final(fuel_level,3)| (-(+ |v_initial(fuel_level,3)|  |v(contrib(fuel_level,incr),3)| ) |v(contrib(fuel_level,decr),3)| ))))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr),3),0))| (>= |v(contrib(fuel_level,incr),3)|  0)))
(assert (=> |required(ezcsp__eq(adur(generate),ezcsp__mn(end(2),end(0))))| (= |adur(generate)| (- |end(2)|  |end(0)| ))))
(assert (=> |required(ezcsp__sum(list(decr(1),2),ezcsp__eq,v(contrib(fuel_level,decr),1)))| (= |v(contrib(fuel_level,decr,generate),1)|  |v(contrib(fuel_level,decr),1)| )))
(assert (=> |required(ezcsp__eq(start(0),0))| (= |start(0)|  0)))
(assert (=> |required(ezcsp__eq(v_initial(fuel_level,0),990))| (= |v_initial(fuel_level,0)|  990)))
(assert (=> |required(ezcsp__geq(v_final(fuel_level,0),0))| (>= |v_final(fuel_level,0)|  0)))
(assert (=> |required(ezcsp__eq(dur(3),ezcsp__mn(end(3),start(3))))| (= |dur(3)| (- |end(3)|  |start(3)| ))))
(assert (=> |required(ezcsp__sum(list(incr(2),2),ezcsp__eq,v(contrib(fuel_level,incr),2)))| (= |v(contrib(fuel_level,incr,refuel(tank1)),2)|  |v(contrib(fuel_level,incr),2)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr),2),0))| (>= |v(contrib(fuel_level,incr),2)|  0)))
(assert (=> |required(ezcsp__geq(v_final(fuel_level,1),0))| (>= |v_final(fuel_level,1)|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),1),0))| (>= |v(contrib(fuel_level,incr,refuel(tank1)),1)|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))| (>= |v(contrib(fuel_level,incr,refuel(tank1)),0)|  0)))
(assert (=> |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(1))))| (= |adur(refuel(tank1))| (- |end(1)|  |end(1)| ))))
(assert (=> |required(ezcsp__geq(v_initial(fuel_level,3),0))| (>= |v_initial(fuel_level,3)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),0))| (= |v(contrib(fuel_level,incr,refuel(tank1)),3)|  0)))
(assert (=> |required(ezcsp__geq(end(2),0))| (>= |end(2)|  0)))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr),1),0))| (>= |v(contrib(fuel_level,decr),1)|  0)))
(assert (=> |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(0))))| (= |adur(refuel(tank1))| (- |end(2)|  |end(0)| ))))
(assert (=> |required(ezcsp__geq(start(2),0))| (>= |start(2)|  0)))
(assert (=> |required(ezcsp__eq(v_initial(fuel_level,2),v_final(fuel_level,1)))| (= |v_initial(fuel_level,2)|  |v_final(fuel_level,1)| )))
(assert (=> |required(ezcsp__leq(v_final(fuel_level,3),1000))| (<= |v_final(fuel_level,3)|  1000)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))| (= |v(contrib(fuel_level,incr,refuel(tank1)),2)|  0)))
(assert (=> |required(ezcsp__geq(end(3),start(3)))| (>= |end(3)|  |start(3)| )))
(assert (=> |required(ezcsp__leq(v_initial(fuel_level,0),1000))| (<= |v_initial(fuel_level,0)|  1000)))
(assert (=> |required(ezcsp__geq(v_initial(fuel_level,2),0))| (>= |v_initial(fuel_level,2)|  0)))
(assert (=> |required(ezcsp__eq(dur(2),ezcsp__mn(end(2),start(2))))| (= |dur(2)| (- |end(2)|  |start(2)| ))))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr,refuel(tank1)),2),0))| (>= |v(contrib(fuel_level,incr,refuel(tank1)),2)|  0)))
(assert (=> |required(ezcsp__eq(adur(generate),ezcsp__mn(end(1),end(0))))| (= |adur(generate)| (- |end(1)|  |end(0)| ))))
(assert (=> |required(ezcsp__sum(list(incr(1),2),ezcsp__eq,v(contrib(fuel_level,incr),1)))| (= |v(contrib(fuel_level,incr,refuel(tank1)),1)|  |v(contrib(fuel_level,incr),1)| )))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),0),0))| (= |v(contrib(fuel_level,incr,refuel(tank1)),0)|  0)))
(assert (=> |required(ezcsp__geq(stime(generate),0))| (>= |stime(generate)|  0)))
(assert (=> |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(2),end(1))))| (= |adur(refuel(tank1))| (- |end(2)|  |end(1)| ))))
(assert (=> |required(ezcsp__eq(adur(refuel(tank1)),ezcsp__mn(end(1),end(0))))| (= |adur(refuel(tank1))| (- |end(1)|  |end(0)| ))))
(assert (=> |required(ezcsp__eq(stime(refuel(tank1)),end(1)))| (= |stime(refuel(tank1))|  |end(1)| )))
(assert (=> |required(ezcsp__lt(v_final(fuel_level,0),0))| (< |v_final(fuel_level,0)|  0)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),3),ezcsp__tm(2,ezcsp__mn(end(3),start(3)))))| (= |v(contrib(fuel_level,incr,refuel(tank1)),3)| (* 2(- |end(3)|  |start(3)| )))))
(assert (=> |required(ezcsp__eq(ezcsp__mn(end(2),stime(generate)),1000))| (=(- |end(2)|  |stime(generate)| ) 1000)))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),3),ezcsp__tm(1,ezcsp__mn(end(3),start(3)))))| (= |v(contrib(fuel_level,decr,generate),3)| (* 1(- |end(3)|  |start(3)| )))))
(assert (=> |required(ezcsp__eq(v_final(fuel_level,1),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,1),v(contrib(fuel_level,incr),1)),v(contrib(fuel_level,decr),1))))| (= |v_final(fuel_level,1)| (-(+ |v_initial(fuel_level,1)|  |v(contrib(fuel_level,incr),1)| ) |v(contrib(fuel_level,decr),1)| ))))
(assert (=> |required(ezcsp__eq(ezcsp__mn(end(1),stime(generate)),1000))| (=(- |end(1)|  |stime(generate)| ) 1000)))
(assert (=> |required(ezcsp__eq(start(1),end(0)))| (= |start(1)|  |end(0)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,incr),1),0))| (>= |v(contrib(fuel_level,incr),1)|  0)))
(assert (=> |required(ezcsp__eq(stime(generate),end(1)))| (= |stime(generate)|  |end(1)| )))
(assert (=> |required(ezcsp__leq(v_final(fuel_level,1),1000))| (<= |v_final(fuel_level,1)|  1000)))
(assert (=> |required(ezcsp__geq(start(0),0))| (>= |start(0)|  0)))
(assert (=> |required(ezcsp__sum(list(incr(3),2),ezcsp__eq,v(contrib(fuel_level,incr),3)))| (= |v(contrib(fuel_level,incr,refuel(tank1)),3)|  |v(contrib(fuel_level,incr),3)| )))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,incr,refuel(tank1)),2),ezcsp__tm(2,ezcsp__mn(end(2),start(2)))))| (= |v(contrib(fuel_level,incr,refuel(tank1)),2)| (* 2(- |end(2)|  |start(2)| )))))
(assert (=> |required(ezcsp__eq(start(3),end(2)))| (= |start(3)|  |end(2)| )))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),1),0))| (= |v(contrib(fuel_level,decr,generate),1)|  0)))
(assert (=> |required(ezcsp__eq(v_final(fuel_level,2),ezcsp__mn(ezcsp__pl(v_initial(fuel_level,2),v(contrib(fuel_level,incr),2)),v(contrib(fuel_level,decr),2))))| (= |v_final(fuel_level,2)| (-(+ |v_initial(fuel_level,2)|  |v(contrib(fuel_level,incr),2)| ) |v(contrib(fuel_level,decr),2)| ))))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),3),0))| (>= |v(contrib(fuel_level,decr,generate),3)|  0)))
(assert (=> |required(ezcsp__sum(list(decr(3),2),ezcsp__eq,v(contrib(fuel_level,decr),3)))| (= |v(contrib(fuel_level,decr,generate),3)|  |v(contrib(fuel_level,decr),3)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),0),0))| (>= |v(contrib(fuel_level,decr,generate),0)|  0)))
(assert (=> |required(ezcsp__geq(end(0),0))| (>= |end(0)|  0)))
(assert (=> |required(ezcsp__eq(v_initial(fuel_level,1),v_final(fuel_level,0)))| (= |v_initial(fuel_level,1)|  |v_final(fuel_level,0)| )))
(assert (=> |required(ezcsp__geq(v(contrib(fuel_level,decr,generate),2),0))| (>= |v(contrib(fuel_level,decr,generate),2)|  0)))
(assert (=> |required(ezcsp__eq(dur(1),ezcsp__mn(end(1),start(1))))| (= |dur(1)| (- |end(1)|  |start(1)| ))))
(assert (=> |required(ezcsp__geq(v_final(fuel_level,3),0))| (>= |v_final(fuel_level,3)|  0)))
(assert (=> |required(ezcsp__eq(start(2),end(1)))| (= |start(2)|  |end(1)| )))
(assert (=> |required(ezcsp__eq(v(contrib(fuel_level,decr,generate),2),ezcsp__tm(1,ezcsp__mn(end(2),start(2)))))| (= |v(contrib(fuel_level,decr,generate),2)| (* 1(- |end(2)|  |start(2)| )))))

; Check satisfiability
(check-sat)
(exit)
